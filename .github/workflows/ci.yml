name: ModShot CI
on:
  workflow_dispatch:
  pull_request:
  push:
    tags:
      - "v*"
    branches:
      - master

jobs:
  build-ubuntu:
    name: Build ModShot for Linux
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ruby_ver: ['3.1', '3.0', '2.7']
        steam: [true, false]
    steps:
        - name: Checkout code
          uses: actions/checkout@v2
        - name: Setup Python
          uses: actions/setup-python@v2
        - name: Build
          working-directory: ${{ github.workspace }}
          run: |
              sudo apt update
              bash setup.sh
              pip3 install meson ninja
              cd linux
              make RUBY_VER=${{ matrix.ruby_ver }}
              source vars.sh
              cd ..
              meson build -Dmri_version=${{ matrix.ruby_ver }} --prefix=$PWD/out/ -Dsteam=${{ matrix.steam }}
              cd build && ninja install
        - name: Create dist folder
          run: |
            mkdir ${{ runner.temp }}/built_artifact;
            mv ${{ github.workspace }}/out/* ${{ runner.temp }}/built_artifact/;
        - name: Upload artifact
          uses: actions/upload-artifact@v2
          with:
            name: modshot_build_ubuntu_rb-${{ matrix.ruby_ver }}_steam-${{ matrix.steam }}
            path: ${{ runner.temp }}/built_artifact

  build-windows:
    name: Build ModShot for Windows
    runs-on: windows-latest
    needs: build-ubuntu
    strategy:
      fail-fast: false
      matrix:
        ruby_ver: ['3.0', '2.7']
        sys: ['mingw64']
        steam: [true, false]
        include:
          - sys: 'ucrt64'
            ruby_ver: '3.1'
            steam: true
          - sys: 'ucrt64'
            ruby_ver: '3.1'
            steam: false
    steps:
        - name: Checkout code
          uses: actions/checkout@v2
        - name: Setup msys2
          uses: msys2/setup-msys2@v2
          with:
            msystem: ${{matrix.sys}}
        - name: Install packages with pacman
          shell: msys2 {0}
          run: |
            pacman -S --noconfirm  mm-common autoconf automake gcc make cmake libtool
        - name: Build
          working-directory: ${{ github.workspace }}
          shell: msys2 {0}
          run: |
              bash setup.sh
              cd windows
              make RUBY_VER=${{ matrix.ruby_ver }}
              source vars.sh
              cd ..
              meson build -Dmri_version=${{ matrix.ruby_ver }} --prefix=$PWD/out/ -Dsteam=${{ matrix.steam }}
              cd build && ninja install
        - name: Create dist folder
          run: |
            mkdir ${{ runner.temp }}\built_artifact;
            move ${{ github.workspace }}\out\* ${{ runner.temp }}\built_artifact\;
        - name: Upload artifact
          uses: actions/upload-artifact@v2
          with:
            name: modshot_build_windows_rb-${{ matrix.ruby_ver }}-${{ matrix.sys }}_steam-${{ matrix.steam }}
            path: ${{ runner.temp }}\built_artifact

  release-dev:
    name: Release ModShot Dev
    needs: build-windows
    runs-on: ubuntu-latest
    if: ${{ !startsWith(${{ github.ref }}, 'refs/tags/v') }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ${{ github.workspace }}
      - name: Shorten SHA
        id: sha
        run: echo "::set-output name=sha_short::${GITHUB_SHA::7}"
      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          title: "ModShot ${{ steps.sha.outputs.sha_short }}"
          files: |
            ${{ github.workspace }}/*.zip

  release-tagged:
    name: Release ModShot Tagged
    needs: build-windows
    runs-on: ubuntu-latest
    if: ${{ startsWith(${{ github.ref }}, 'refs/tags/v') }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ${{ github.workspace }}
      - uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          prerelease: false
          files: |
            ${{ github.workspace }}/*.zip
