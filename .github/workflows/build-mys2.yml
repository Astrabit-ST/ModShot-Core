name: Build Modshot with MSYS2
on: workflow_dispatch
jobs:
  build-windows:
    name: Build ModShot for Windows
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          # - { sys: mingw64, env: x86_64 }
          - { sys: ucrt64,  env: ucrt-x86_64 }  # Experimental!
    steps:
        - name: Checkout code
          uses: actions/checkout@v2
        - name: Setup msys2
          uses: msys2/setup-msys2@v2
          with:
            msystem: ${{matrix.sys}}
        - name: Install packages with pacman
          shell: msys2 {0}
          run: |
            pacman -S --noconfirm  mm-common mingw-w64-${{matrix.env}}-doxygen mingw-w64-${{matrix.env}}-graphviz \
            mingw-w64-${{matrix.env}}-libffi mingw-w64-${{matrix.env}}-openssl mingw-w64-${{matrix.env}}-ninja \
            mingw-w64-${{matrix.env}}-cmake mingw-w64-${{matrix.env}}-make mingw-w64-${{matrix.env}}-ruby \
            mingw-w64-${{matrix.env}}-freetype git autotools mingw-w64-${{matrix.env}}-toolchain \
            mingw-w64-${{matrix.env}}-gcc bison mingw-w64-${{matrix.env}}-SDL2 python3 python3-pip
        - name: Setup env vars
          shell: msys2 {0}
          run: |
                export CONAN_USER_HOM=/c/.conan
                export CONAN_USER_HOME_SHORT=/c/.conan
        - name: Configure conan
          shell: msys2 {0}
          run: |
            pip3 install conan;
            conan remote add eliza https://rkevin.jfrog.io/artifactory/api/conan/eliza;
            conan remote add bincrafters https://bincrafters.jfrog.io/artifactory/api/conan/public-conan;
            conan remote add astrabit https://rkevin.jfrog.io/artifactory/api/conan/astrabit;
            conan config set general.revisions_enabled=1;
            conan config set general.cmake_generator="Unix Makefiles";
            conan profile new default --detect;
            conan profile update settings.compiler=gcc default;
            conan profile update settings.compiler.version=11.2 default;
            conan profile update settings.compiler.libcxx=libstdc++11 default;
            setx CONAN_USE_ALWAYS_SHORT_PATHS 1;
            mkdir ~/build
        - name: Cache conan dependencies
          uses: actions/cache@v2
          with:
            path: C:\.conan
            key: ${{ runner.os }}-ucrt64-cached-conan-modules-${{ hashFiles('conanfile.py') }}
        - name: Build dependencies using conan
          shell: msys2 {0}
          run: |
            cd ~/build;
            export CXX=D:\a\_temp\msys64\ucrt64\bin\g++.exe;
            conan install /d/a/OSFM-Core-Public/OSFM-Core-Public --build=missing;
        - name: Build ModShot
          shell: msys2 {0}
          run: |
            cd ~/build;
            conan build ${{ github.workspace }}
        - name: Create dist folder
          shell: msys2 {0}
          run: |
            mkdir ${{ runner.temp }}\built_artifact;
            copy ${{ runner.temp }}\build\bin\lib ${{ runner.temp }}\built_artifact\lib;
            copy ${{ runner.temp }}\build\bin\* ${{ runner.temp }}\built_artifact\lib;
            move ${{ runner.temp }}\built_artifact\lib\oneshot-shim.exe ${{ runner.temp }}\built_artifact\oneshot.exe;
            copy ${{ runner.temp }}\build ${{ runner.temp }}\built_artifact\build;
            copy C:\.conan ${{ runner.temp }}\built_artifact\.conan
        - name: Upload artifact
          uses: actions/upload-artifact@v2
          with:
            name: modshot_build_windows_${{ github.sha }}
            path: ${{ runner.temp }}\built_artifact
        